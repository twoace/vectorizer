name: Build Windows exe

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Erm√∂glicht manuellen Start

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Download Potrace
      run: python download_potrace.py
    
    - name: Create Icon
      run: python create_icon.py
    
    - name: Build Windows exe
      run: python build.py
    
    - name: Verify exe was created
      run: |
        if (Test-Path "dist/BildVektorisierer_v1.0.exe") {
          Write-Host "[OK] BildVektorisierer_v1.0.exe wurde erfolgreich erstellt"
          $fileSize = (Get-Item "dist/BildVektorisierer_v1.0.exe").Length / 1MB
          Write-Host "[INFO] Dateigr√∂√üe: $([math]::Round($fileSize, 2)) MB"
        } else {
          Write-Host "[ERROR] BildVektorisierer_v1.0.exe wurde nicht gefunden!"
          exit 1
        }
    
    - name: Create test images
      run: |
        # Erstelle Testordner
        New-Item -ItemType Directory -Force -Path "test_input"
        New-Item -ItemType Directory -Force -Path "test_output"
        
        # Erstelle ein einfaches Testbild mit Python
        python -c "
        from PIL import Image, ImageDraw
        import os
        
        # Erstelle ein einfaches schwarzes Quadrat auf wei√üem Hintergrund
        img = Image.new('RGB', (200, 200), 'white')
        draw = ImageDraw.Draw(img)
        draw.rectangle([50, 50, 150, 150], fill='black')
        img.save('test_input/test_square.png')
        
        # Erstelle einen einfachen Kreis
        img2 = Image.new('RGB', (200, 200), 'white')
        draw2 = ImageDraw.Draw(img2)
        draw2.ellipse([50, 50, 150, 150], fill='black')
        img2.save('test_input/test_circle.png')
        
        print('[OK] Testbilder erstellt')
        "
    
    - name: Test exe file properties
      run: |
        # Teste exe-Eigenschaften ohne sie zu starten
        Write-Host "[INFO] Teste exe-Eigenschaften..."
        
        $exePath = "dist/BildVektorisierer_v1.0.exe"
        if (Test-Path $exePath) {
          # Dateigr√∂√üe pr√ºfen
          $fileSize = (Get-Item $exePath).Length
          if ($fileSize -gt 10MB -and $fileSize -lt 200MB) {
            Write-Host "[OK] exe-Dateigr√∂√üe ist angemessen ($([math]::Round($fileSize / 1MB, 1)) MB)"
          } else {
            Write-Host "[WARNING] exe-Dateigr√∂√üe ungew√∂hnlich: $([math]::Round($fileSize / 1MB, 1)) MB"
          }
          
          # Pr√ºfe ob es eine g√ºltige PE-Datei ist
          try {
            $fileInfo = Get-ItemProperty $exePath
            Write-Host "[OK] exe-Datei ist g√ºltig"
          } catch {
            Write-Host "[ERROR] exe-Datei ist besch√§digt: $($_.Exception.Message)"
            exit 1
          }
        } else {
          Write-Host "[ERROR] exe-Datei nicht gefunden!"
          exit 1
        }
    
    - name: Test potrace integration
      run: |
        # Teste ob potrace korrekt eingebettet wurde
        Write-Host "[INFO] Teste Potrace-Integration..."
        
        if (Test-Path "potrace/potrace.exe") {
          Write-Host "[OK] potrace.exe gefunden"
          
          # Teste potrace direkt
          try {
            $potraceOutput = & "potrace/potrace.exe" --version 2>&1
            Write-Host "[OK] Potrace Version: $potraceOutput"
          } catch {
            Write-Host "[WARNING] Potrace-Test fehlgeschlagen: $($_.Exception.Message)"
          }
        } else {
          Write-Host "[ERROR] potrace.exe nicht gefunden!"
          exit 1
        }
    
    - name: Test Python modules in exe
      run: |
        # Teste ob alle ben√∂tigten Module verf√ºgbar sind
        Write-Host "[INFO] Teste Python-Module..."
        
        python -c "
        try:
            import tkinter
            print('[OK] tkinter verf√ºgbar')
        except ImportError as e:
            print(f'[ERROR] tkinter fehlt: {e}')
            
        try:
            from PIL import Image
            print('[OK] PIL/Pillow verf√ºgbar')
        except ImportError as e:
            print(f'[ERROR] PIL fehlt: {e}')
            
        try:
            import subprocess
            print('[OK] subprocess verf√ºgbar')
        except ImportError as e:
            print(f'[ERROR] subprocess fehlt: {e}')
        "
    
    - name: Test potrace conversion
      run: |
        # Teste Potrace-Konvertierung direkt
        Write-Host "[INFO] Teste Potrace-Konvertierung..."
        
        try {
          # Konvertiere Testbild zu PBM
          python -c "from PIL import Image; img = Image.open('test_input/test_square.png'); img = img.convert('1'); img.save('test_input/test_square.pbm'); print('[OK] PBM-Datei erstellt')"
          
          # F√ºhre Potrace aus
          if (Test-Path "test_input/test_square.pbm") {
            $result = & "potrace/potrace.exe" "test_input/test_square.pbm" "-s" "-o" "test_output/test_square.svg" 2>&1
            
            if (Test-Path "test_output/test_square.svg") {
              $svgSize = (Get-Item "test_output/test_square.svg").Length
              Write-Host "[OK] SVG-Datei erstellt ($svgSize Bytes)"
              
              # Pr√ºfe SVG-Inhalt
              $svgContent = Get-Content "test_output/test_square.svg" -Raw
              if ($svgContent -match "<svg" -and $svgContent -match "</svg>") {
                Write-Host "[OK] SVG-Format ist g√ºltig"
              } else {
                Write-Host "[WARNING] SVG-Format k√∂nnte ung√ºltig sein"
              }
            } else {
              Write-Host "[ERROR] SVG-Datei wurde nicht erstellt"
              Write-Host "[INFO] Potrace Output: $result"
            }
          } else {
            Write-Host "[ERROR] PBM-Datei wurde nicht erstellt"
          }
        } catch {
          Write-Host "[ERROR] Potrace-Konvertierungstest fehlgeschlagen: $($_.Exception.Message)"
        }
    
    - name: Upload exe artifact
      uses: actions/upload-artifact@v4
      with:
        name: BildVektorisierer-Windows
        path: dist/BildVektorisierer_v1.0.exe
        retention-days: 30
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test_input/
          test_output/
        retention-days: 7
    
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/BildVektorisierer_v1.0.exe
        name: "Bild Vektorisierer ${{ github.ref_name }}"
        body: |
          üéâ **Neue Version verf√ºgbar!**
          
          **Download:** BildVektorisierer_v1.0.exe
          
          **Features:**
          - ‚úÖ Vollst√§ndig eigenst√§ndige Windows-exe
          - ‚úÖ Keine Installation erforderlich
          - ‚úÖ Unterst√ºtzt PNG, JPG, JPEG, BMP, TIFF
          - ‚úÖ Konfigurierbarer Threshold-Wert
          - ‚úÖ Automatische SVG-Ausgabe
          
          **Verwendung:**
          1. BildVektorisierer_v1.0.exe herunterladen
          2. Doppelklick zum Starten
          3. Ordner mit Bildern ausw√§hlen
          4. Threshold einstellen (Standard: 128)
          5. Vektorisierung starten
          
          Die SVG-Dateien werden im "output" Ordner gespeichert.
          
          **Getestet auf:**
          - Windows 11 (GitHub Actions)
          - Alle Python-Module eingebettet
          - Potrace-Integration funktional
          - SVG-Konvertierung erfolgreich
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 