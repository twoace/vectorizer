name: Build Windows exe

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Erm√∂glicht manuellen Start

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Download Potrace
      run: python download_potrace.py
    
    - name: Build Windows exe
      run: python build.py
    
    - name: Verify exe was created
      run: |
        if (Test-Path "dist/BildVektorisierer.exe") {
          Write-Host "[OK] BildVektorisierer.exe wurde erfolgreich erstellt"
          $fileSize = (Get-Item "dist/BildVektorisierer.exe").Length / 1MB
          Write-Host "[INFO] Dateigr√∂√üe: $([math]::Round($fileSize, 2)) MB"
        } else {
          Write-Host "[ERROR] BildVektorisierer.exe wurde nicht gefunden!"
          exit 1
        }
    
    - name: Create test images
      run: |
        # Erstelle Testordner
        New-Item -ItemType Directory -Force -Path "test_input"
        New-Item -ItemType Directory -Force -Path "test_output"
        
        # Erstelle ein einfaches Testbild mit Python
        python -c "
        from PIL import Image, ImageDraw
        import os
        
        # Erstelle ein einfaches schwarzes Quadrat auf wei√üem Hintergrund
        img = Image.new('RGB', (200, 200), 'white')
        draw = ImageDraw.Draw(img)
        draw.rectangle([50, 50, 150, 150], fill='black')
        img.save('test_input/test_square.png')
        
        # Erstelle einen einfachen Kreis
        img2 = Image.new('RGB', (200, 200), 'white')
        draw2 = ImageDraw.Draw(img2)
        draw2.ellipse([50, 50, 150, 150], fill='black')
        img2.save('test_input/test_circle.png')
        
        print('[OK] Testbilder erstellt')
        "
    
    - name: Test exe functionality (CLI mode)
      run: |
        # Teste die exe mit Kommandozeilenparametern
        Write-Host "[INFO] Teste exe-Funktionalit√§t..."
        
        # Pr√ºfe ob die exe startet (Version/Help)
        try {
          $process = Start-Process -FilePath "dist/BildVektorisierer.exe" -ArgumentList "--help" -Wait -PassThru -WindowStyle Hidden
          if ($process.ExitCode -eq 0) {
            Write-Host "[OK] exe startet erfolgreich"
          } else {
            Write-Host "[WARNING] exe Exit Code: $($process.ExitCode)"
          }
        } catch {
          Write-Host "[WARNING] Konnte exe nicht im Help-Modus starten: $($_.Exception.Message)"
        }
    
    - name: Test potrace integration
      run: |
        # Teste ob potrace korrekt eingebettet wurde
        Write-Host "[INFO] Teste Potrace-Integration..."
        
        if (Test-Path "potrace/potrace.exe") {
          Write-Host "[OK] potrace.exe gefunden"
          
          # Teste potrace direkt
          try {
            $potraceOutput = & "potrace/potrace.exe" --version 2>&1
            Write-Host "[OK] Potrace Version: $potraceOutput"
          } catch {
            Write-Host "[WARNING] Potrace-Test fehlgeschlagen: $($_.Exception.Message)"
          }
        } else {
          Write-Host "[ERROR] potrace.exe nicht gefunden!"
          exit 1
        }
    
    - name: Test Python modules in exe
      run: |
        # Teste ob alle ben√∂tigten Module verf√ºgbar sind
        Write-Host "[INFO] Teste Python-Module..."
        
        python -c "
        try:
            import tkinter
            print('[OK] tkinter verf√ºgbar')
        except ImportError as e:
            print(f'[ERROR] tkinter fehlt: {e}')
            
        try:
            from PIL import Image
            print('[OK] PIL/Pillow verf√ºgbar')
        except ImportError as e:
            print(f'[ERROR] PIL fehlt: {e}')
            
        try:
            import subprocess
            print('[OK] subprocess verf√ºgbar')
        except ImportError as e:
            print(f'[ERROR] subprocess fehlt: {e}')
        "
    
    - name: Verify exe dependencies
      run: |
        # Pr√ºfe exe-Abh√§ngigkeiten mit PowerShell
        Write-Host "[INFO] Pr√ºfe exe-Abh√§ngigkeiten..."
        
        try {
          # Versuche die exe zu starten und sofort zu beenden
          $job = Start-Job -ScriptBlock {
            Start-Process -FilePath "dist/BildVektorisierer.exe" -WindowStyle Hidden
            Start-Sleep -Seconds 2
            Get-Process -Name "BildVektorisierer" -ErrorAction SilentlyContinue | Stop-Process -Force
          }
          
          Wait-Job $job -Timeout 10
          Remove-Job $job -Force
          
          Write-Host "[OK] exe kann gestartet werden"
        } catch {
          Write-Host "[WARNING] exe-Start-Test: $($_.Exception.Message)"
        }
    
    - name: Upload exe artifact
      uses: actions/upload-artifact@v4
      with:
        name: BildVektorisierer-Windows
        path: dist/BildVektorisierer.exe
        retention-days: 30
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test_input/
          test_output/
        retention-days: 7
    
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/BildVektorisierer.exe
        name: "Bild Vektorisierer ${{ github.ref_name }}"
        body: |
          üéâ **Neue Version verf√ºgbar!**
          
          **Download:** BildVektorisierer.exe
          
          **Features:**
          - ‚úÖ Vollst√§ndig eigenst√§ndige Windows-exe
          - ‚úÖ Keine Installation erforderlich
          - ‚úÖ Unterst√ºtzt PNG, JPG, JPEG, BMP, TIFF
          - ‚úÖ Konfigurierbarer Threshold-Wert
          - ‚úÖ Automatische SVG-Ausgabe
          
          **Verwendung:**
          1. BildVektorisierer.exe herunterladen
          2. Doppelklick zum Starten
          3. Ordner mit Bildern ausw√§hlen
          4. Threshold einstellen (Standard: 128)
          5. Vektorisierung starten
          
          Die SVG-Dateien werden im "output" Ordner gespeichert.
          
          **Getestet auf:**
          - Windows 11 (GitHub Actions)
          - Alle Python-Module eingebettet
          - Potrace-Integration funktional
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 