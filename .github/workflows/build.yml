name: Build Vectorizer Apps

# Berechtigungen f√ºr GitHub Actions
permissions:
  contents: write
  packages: write

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]  # Bei Version-Tags auch ausf√ºhren
  pull_request:
    branches: [ main, master ]
  release:
    types: [created]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Download potrace for Windows
      run: |
        if (Test-Path potrace) { Remove-Item -Recurse -Force potrace }
        New-Item -ItemType Directory -Name potrace
        Invoke-WebRequest -Uri "http://potrace.sourceforge.net/download/1.16/potrace-1.16.win64.zip" -OutFile "potrace.zip"
        Expand-Archive -Path "potrace.zip" -DestinationPath "temp"
        Copy-Item "temp\potrace-1.16.win64\potrace.exe" "potrace\"
        Remove-Item "potrace.zip"
        Remove-Item -Recurse -Force "temp"
    
    - name: Build Windows executable
      run: |
        pyinstaller vectorizer.spec
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: BildVektorisierer-Windows
        path: dist/BildVektorisierer.exe

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Install potrace
      run: |
        brew install potrace
        mkdir -p potrace
        cp /opt/homebrew/bin/potrace potrace/ || cp /usr/local/bin/potrace potrace/
    
    - name: Build macOS app
      run: |
        pyinstaller vectorizer.spec
    
    - name: Create DMG
      run: |
        mkdir -p dmg
        cp -r dist/BildVektorisierer.app dmg/
        ln -s /Applications dmg/Applications
        hdiutil create -volname "Bild Vektorisierer" -srcfolder dmg -ov -format UDZO BildVektorisierer.dmg
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: BildVektorisierer-macOS
        path: BildVektorisierer.dmg

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y potrace python3-tk
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Prepare potrace
      run: |
        mkdir -p potrace
        cp /usr/bin/potrace potrace/
    
    - name: Build Linux executable
      run: |
        pyinstaller vectorizer.spec
    
    - name: Create Linux package
      run: |
        tar czf BildVektorisierer-Linux.tar.gz -C dist BildVektorisierer
    
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: BildVektorisierer-Linux
        path: BildVektorisierer-Linux.tar.gz

  # Automatischer Release bei Tags
  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Bild Vektorisierer ${{ github.ref_name }}
        body: |
          # üé® Bild Vektorisierer ${{ github.ref_name }}
          
          Eine benutzerfreundliche Desktop-Anwendung zur Konvertierung von Rasterbildern in Vektorgrafiken (SVG).
          
          ## ‚ú® Features
          - üñºÔ∏è Unterst√ºtzt PNG, JPG, JPEG, BMP, TIFF
          - ‚öôÔ∏è Einstellbarer Threshold-Wert (0-255)
          - üéØ Batch-Verarbeitung ganzer Ordner
          - üìä Fortschrittsanzeige
          - üñ•Ô∏è Intuitive grafische Benutzeroberfl√§che
          
          ## üì• Downloads
          W√§hlen Sie die passende Version f√ºr Ihr Betriebssystem:
          
          - **Windows**: `BildVektorisierer-Windows.exe` - Direkt ausf√ºhrbare Datei
          - **macOS**: `BildVektorisierer-macOS.dmg` - Drag & Drop Installation
          - **Linux**: `BildVektorisierer-Linux.tar.gz` - Entpacken und ausf√ºhren
          
          ## üöÄ Installation
          
          ### Windows
          1. `BildVektorisierer-Windows.exe` herunterladen
          2. Datei ausf√ºhren (Windows Defender Warnung mit "Trotzdem ausf√ºhren" best√§tigen)
          
          ### macOS
          1. `BildVektorisierer-macOS.dmg` herunterladen
          2. DMG √∂ffnen und App in den Programme-Ordner ziehen
          3. Bei Sicherheitswarnung: Systemeinstellungen ‚Üí Sicherheit ‚Üí "Trotzdem √∂ffnen"
          
          ### Linux
          1. `BildVektorisierer-Linux.tar.gz` herunterladen
          2. Entpacken: `tar -xzf BildVektorisierer-Linux.tar.gz`
          3. Ausf√ºhren: `./BildVektorisierer/BildVektorisierer`
          
          ## üõ†Ô∏è Verwendung
          1. Ordner mit Bildern ausw√§hlen
          2. Threshold-Wert anpassen (Standard: 128)
          3. "Vektorisierung starten" klicken
          4. SVG-Dateien werden im `output/` Unterordner erstellt
          
          ---
          
          **Technische Details**: Basiert auf Python, tkinter, Pillow und potrace. Kompiliert mit PyInstaller f√ºr native Performance.
        draft: false
        prerelease: false
    
    - name: Upload Windows release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: BildVektorisierer-Windows/BildVektorisierer.exe
        asset_name: BildVektorisierer-Windows.exe
        asset_content_type: application/octet-stream
    
    - name: Upload macOS release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: BildVektorisierer-macOS/BildVektorisierer.dmg
        asset_name: BildVektorisierer-macOS.dmg
        asset_content_type: application/octet-stream
    
    - name: Upload Linux release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: BildVektorisierer-Linux/BildVektorisierer-Linux.tar.gz
        asset_name: BildVektorisierer-Linux.tar.gz
        asset_content_type: application/gzip

  # Release-Job f√ºr manuell erstellte Releases
  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Upload Windows release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: BildVektorisierer-Windows/BildVektorisierer.exe
        asset_name: BildVektorisierer-Windows.exe
        asset_content_type: application/octet-stream
    
    - name: Upload macOS release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: BildVektorisierer-macOS/BildVektorisierer.dmg
        asset_name: BildVektorisierer-macOS.dmg
        asset_content_type: application/octet-stream
    
    - name: Upload Linux release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: BildVektorisierer-Linux/BildVektorisierer-Linux.tar.gz
        asset_name: BildVektorisierer-Linux.tar.gz
        asset_content_type: application/gzip 